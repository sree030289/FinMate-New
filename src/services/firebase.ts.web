// Web version of Firebase SDK (compatible with Expo Go)
import { initializeApp } from 'firebase/app';
import { 
  getAuth, 
  initializeAuth,
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut as firebaseSignOut,
  onAuthStateChanged as firebaseOnAuthStateChanged,
  updateProfile as firebaseUpdateProfile,
  User
} from 'firebase/auth';
import { getFirestore, doc, getDoc, collection } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getReactNativePersistence } from 'firebase/auth/react-native';

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDummyKeyReplaceMeWithRealOneAbcXyz",
  authDomain: "finmate-app.firebaseapp.com",
  projectId: "finmate-app",
  storageBucket: "finmate-app.appspot.com",
  messagingSenderId: "123456789012",
  appId: "1:123456789012:web:abc123def456ghi789jkl",
  measurementId: "G-ABCDEF1234"
};

// Add debug logs
console.log('Initializing Firebase (timestamp):', Date.now());

// Initialize Firebase
const app = initializeApp(firebaseConfig);
console.log('Firebase app initialized:', app.name);

// Initialize Firebase Auth with persistence
let auth;
try {
  console.log('Initializing Firebase Auth with React Native persistence...');
  auth = initializeAuth(app, {
    persistence: getReactNativePersistence(AsyncStorage)
  });
  console.log('Firebase Auth initialized with persistence');
} catch (error) {
  console.log('Error initializing Auth with persistence, falling back to default:', error);
  auth = getAuth(app);
  console.log('Firebase Auth initialized with default persistence');
}

// Initialize other Firebase services
const db = getFirestore(app);
const storage = getStorage(app);

// Helper function to determine if user is premium
const isUserPremium = async (uid: string): Promise<boolean> => {
  try {
    const userDocRef = doc(db, 'users', uid);
    const userDoc = await getDoc(userDocRef);
    if (userDoc.exists()) {
      return userDoc.data()?.isPremium === true;
    }
    return false;
  } catch (error) {
    console.error("Error checking premium status:", error);
    return false;
  }
};

// Wrapper functions with more robust error handling
const createUserWithEmailAndPasswordWrapper = async (email: string, password: string) => {
  try {
    console.log('Creating user with email:', email);
    return await createUserWithEmailAndPassword(auth, email, password);
  } catch (error) {
    console.error('Error creating user:', error);
    throw error;
  }
};

const signInWithEmailAndPasswordWrapper = async (email: string, password: string) => {
  try {
    console.log('Signing in user with email:', email);
    return await signInWithEmailAndPassword(auth, email, password);
  } catch (error) {
    console.error('Error signing in:', error);
    throw error;
  }
};

const signOut = async () => {
  try {
    console.log('Signing out user');
    return await firebaseSignOut(auth);
  } catch (error) {
    console.error('Error signing out:', error);
    throw error;
  }
};

const onAuthStateChanged = (callback: (user: User | null) => void) => {
  console.log('Setting up auth state changed listener');
  return firebaseOnAuthStateChanged(auth, callback);
};

const updateProfile = async (user: User, profile: { displayName?: string; photoURL?: string }) => {
  try {
    console.log('Updating user profile');
    return await firebaseUpdateProfile(user, profile);
  } catch (error) {
    console.error('Error updating profile:', error);
    throw error;
  }
};

// Export everything
export { 
  auth, 
  db, 
  storage,
  createUserWithEmailAndPasswordWrapper as createUserWithEmailAndPassword, 
  signInWithEmailAndPasswordWrapper as signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  updateProfile,
  isUserPremium 
};
